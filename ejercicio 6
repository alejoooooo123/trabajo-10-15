public class FloydWarshall {
    static final int INF = 99999;

    public static void main(String[] args) {
        int[][] graph = {
            {0, 3, INF, 7},
            {8, 0, 2, INF},
            {5, INF, 0, 1},
            {2, INF, INF, 0}
        };

        int n = graph.length;
        int[][] dist = new int[n][n];
        int[][] next = new int[n][n];

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                dist[i][j] = graph[i][j];
                if (graph[i][j] != INF && i != j) {
                    next[i][j] = j;
                } else {
                    next[i][j] = -1;
                }
            }
        }

        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j];
                        next[i][j] = next[i][k];
                    }
                }
            }
        }

        System.out.println("Matriz de distancias resultante:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (dist[i][j] == INF) {
                    System.out.print("INF ");
                } else {
                    System.out.print(dist[i][j] + " ");
                }
            }
            System.out.println();
        }

        System.out.println("\nCamino mínimo de 0 → 3:");
        if (dist[0][3] == INF) {
            System.out.println("No hay camino de 0 a 3.");
        } else {
            System.out.print("0 ");
            int u = 0, v = 3;
            while (u != v) {
                u = next[u][v];
                System.out.print(u + " ");
            }
            System.out.println("\nDistancia total: " + dist[0][3]);
        }
    }
}
