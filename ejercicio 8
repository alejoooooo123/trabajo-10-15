import java.util.*;

public class RedComputadoras {
    private Map<Integer, List<Integer>> listaAdyacencia;
    private int[][] matrizAdyacencia;
    private int numNodos;

    public RedComputadoras(int numNodos) {
        this.numNodos = numNodos;
        listaAdyacencia = new HashMap<>();
        matrizAdyacencia = new int[numNodos][numNodos];

        for (int i = 0; i < numNodos; i++) {
            listaAdyacencia.put(i, new ArrayList<>());
        }
    }

    public void agregarConexion(int nodoA, int nodoB) {
        if (nodoA >= 0 && nodoA < numNodos && nodoB >= 0 && nodoB < numNodos) {
            listaAdyacencia.get(nodoA).add(nodoB);
            listaAdyacencia.get(nodoB).add(nodoA);
            matrizAdyacencia[nodoA][nodoB] = 1;
            matrizAdyacencia[nodoB][nodoA] = 1;
            System.out.println("Conexión agregada entre " + nodoA + " y " + nodoB);
        } else {
            System.out.println("Nodos inválidos");
        }
    }

    public boolean puedenComunicarse(int inicio, int destino) {
        if (inicio == destino) return true;

        boolean[] visitados = new boolean[numNodos];
        Queue<Integer> cola = new LinkedList<>();

        visitados[inicio] = true;
        cola.add(inicio);

        while (!cola.isEmpty()) {
            int actual = cola.poll();

            for (int vecino : listaAdyacencia.get(actual)) {
                if (vecino == destino) {
                    return true;
                }
                if (!visitados[vecino]) {
                    visitados[vecino] = true;
                    cola.add(vecino);
                }
            }
        }
        return false;
    }

    public List<Integer> caminoMasCorto(int inicio, int destino) {
        if (inicio == destino) {
            return Arrays.asList(inicio);
        }

        int[] padres = new int[numNodos];
        Arrays.fill(padres, -1);
        Queue<Integer> cola = new LinkedList<>();

        padres[inicio] = inicio;
        cola.add(inicio);

        while (!cola.isEmpty()) {
            int actual = cola.poll();

            for (int vecino : listaAdyacencia.get(actual)) {
                if (padres[vecino] == -1) {
                    padres[vecino] = actual;
                    if (vecino == destino) {
                        return reconstruirCamino(padres, inicio, destino);
                    }
                    cola.add(vecino);
                }
            }
        }
        return Collections.emptyList();
    }

    private List<Integer> reconstruirCamino(int[] padres, int inicio, int destino) {
        List<Integer> camino = new ArrayList<>();
        int actual = destino;

        while (actual != inicio) {
            camino.add(actual);
            actual = padres[actual];
        }
        camino.add(inicio);
        Collections.reverse(camino);
        return camino;
    }

    public static void main(String[] args) {
        RedComputadoras red = new RedComputadoras(6);

        red.agregarConexion(0, 1);
        red.agregarConexion(0, 2);
        red.agregarConexion(1, 3);
        red.agregarConexion(2, 3);
        red.agregarConexion(3, 4);
        red.agregarConexion(4, 5);

        System.out.println("¿Pueden comunicarse 0 y 5? " + red.puedenComunicarse(0, 5));

        List<Integer> camino = red.caminoMasCorto(0, 5);
        if (camino.isEmpty()) {
            System.out.println("No hay camino entre 0 y 5");
        } else {
            System.out.println("Camino más corto de 0 a 5: " + camino);
        }
    }
}
